#user  nginx;

worker_processes 1; # 1 thread per core


events {
    worker_connections   1000;
}

http {
    # sendfile on; https://docs.nginx.com/nginx/admin-guide/web-server/serving-static-content/#optimizing-performance-for-serving-content

    upstream consul_cluster {
        # Goal is to LB between the one "leader" and X amount of "workers"
        # Docker embedded DNS server will resolve name to IP address when accessed from a container.
        # nginx will use a round robin implementation to distribute the traffic across the services.
        server consul:8500;
        server consul-workers:8500;
    }

    upstream vault_cluster {
        server vault:8200;
        #server consul-workers:8500;
    }

    # proxy_set_header   Host $host;
    # proxy_set_header   X-Real-IP $remote_addr;
    # proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
    # proxy_set_header   X-Forwarded-Host $server_name;

    server {
              listen 8500;
              location / {
                proxy_pass http://consul_cluster;

                # The option "proxy_next_upstream" can be defined with several arguments to tell the NGINX when it should send the request to the next upstream
                # proxy_next_upstream   http_500;
            }
        }

    server {
              listen 80;
              location / {
                proxy_pass http://vault_cluster;
            }
        }

    # This upstream is used to load balance between two Vault instances
    # upstream vault_backend {
    # server vault1.tld:8200;
    # server vault2.tld:8200;
    # }

    # server {
    # listen        80;
    # server_name   vault.tld;

    # # This location is used to handle redirects send by HA Vault Cluster
    # location @handle_vault_standby {
    #     set $saved_vault_endpoint '$upstream_http_location';
    #     proxy_pass $saved_vault_endpoint;
    # }

    # # This location is a failover loadbalancer for all vault instances
    # location ~* ^/(.+)$ {
    #     proxy_pass "http://vault_backend/$1";
    #     proxy_next_upstream     error timeout invalid_header http_500 http_429 http_503;
    #     proxy_connect_timeout   2;
    #     proxy_set_header        Host                $host;
    #     proxy_set_header        X-Real-IP           $remote_addr;
    #     proxy_set_header        X-Forwarded-For     $proxy_add_x_forwarded_for;
    #     proxy_intercept_errors on;
    #     error_page 301 302 307 = @handle_vault_standby;
    # }
}
}
