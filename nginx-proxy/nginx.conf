user  nginx;

worker_processes 1; # 1 thread per core


events {
    worker_connections   1000;
}
http {

    # sendfile on; https://docs.nginx.com/nginx/admin-guide/web-server/serving-static-content/#optimizing-performance-for-serving-content

    upstream consul_cluster {
        # Goal is to LB between the one "leader" and X amount of "workers"
        # Docker embedded DNS server will resolve name to IP address when accessed from a container.
        # nginx will use a round robin implementation to distribute the traffic across the services.
        # server consul:8500;
        # server consul-worker:8500;
        server echo-server:5000;
        server echo-server1:5001;
        }

    # upstream docker-nginx {
    #     server nginx:80;
    # }

    # upstream docker-apache {
    #     server apache:80;
    # }

    # proxy_set_header   Host $host;
    # proxy_set_header   X-Real-IP $remote_addr;
    # proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
    # proxy_set_header   X-Forwarded-Host $server_name;

http {

    # upstream cluster {
    #     server echo-container:5000;
    #     }

    server {
              listen 80;
              location / {
                proxy_pass http://consul_cluster;
              }
        }

    server {
              listen 8500;
              location / {
                proxy_pass http://consul_cluster;
              }
        }

    # server {
    #     listen 8080;

    #     location / {
    #         proxy_pass         http://docker-nginx;
    #         proxy_redirect     off;

    #     }
    # }
}